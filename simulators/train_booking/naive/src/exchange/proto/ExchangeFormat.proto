syntax = "proto3";

package exchange_format;

/// Each client sends some unique meta-data to be identified among others
message ClientMetaData {
  bytes uuid = 1;
}

/// Carriage is fully specified by its id
message Carriage {
  uint32 carriage_id = 1;
}

/// Seat includes information about the carriage it belongs
message Seat {
  Carriage carriage = 1;
  uint32 seat_id = 2;
}

/// In response to get vacant carriages request from a user, the server
/// returs (potentially empty) list of Carriage's with some vacant seats
message VacantCarriagesResponse {
  repeated Carriage carriages = 1;
}

/// In response to "get vacant seats" request from a user, the server
/// returns Carriage id and (possibly empty) list of vacant seats
message VacantSeatsResponse {
  repeated Seat seats = 1;
}

/// In response to "try to book" request from a user, the server returns
/// - either a list of booked seats (potentially in different carrieages)
/// - or nothing and failure status
message BookingResponse {
  repeated Seat seats = 1;
  bool success = 2;
}

/// A textual description of an error
message ErrorResponse {
  string message = 1;
}

/// A response containing some profile data like user name etc
message ProfileResponse {
  string firstName = 1;
  string lastName = 2;
}

/// A response message from the server must be of the Response type
message Response {
  ClientMetaData client = 1;
  oneof payload {
    VacantCarriagesResponse vacant_carriages = 2;
    VacantSeatsResponse vacant_seats = 3;
    ErrorResponse error = 4;
  } 
}

/// User may request to get a list of carriages with at least one empty seat
message VacantCarriagesRequest {
}

/// User may request to get a list of seats in a particular carriage
message VacantSeatsRequest {
  Carriage carriage = 1;
}

/// User may try to book a number of seats in any cars (including seats in different cars)
message BookingRequest {
  repeated Seat seats = 1;
}

/// User may request his/her profile meta-data given the client id
message ProfileRequest {
}

/// Collection of all possible user requests
message Request {
  ClientMetaData client = 1;
  oneof payload {
    VacantCarriagesRequest vacant_carriages = 2;
    VacantSeatsRequest vacant_seats = 3;
    BookingRequest booking = 4;
    ProfileRequest profile = 5;
  }
}
